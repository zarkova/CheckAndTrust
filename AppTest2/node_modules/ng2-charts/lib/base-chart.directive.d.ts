import { OnDestroy, OnChanges, OnInit, EventEmitter, ElementRef, SimpleChanges, DoCheck } from '@angular/core';
import * as chartJs from 'chart.js';
import { Color } from './color';
import { ThemeService } from './theme.service';
import * as ɵngcc0 from '@angular/core';
export declare type SingleDataSet = (number[] | chartJs.ChartPoint[]);
export declare type MultiDataSet = (number[] | chartJs.ChartPoint[])[];
export declare type SingleOrMultiDataSet = SingleDataSet | MultiDataSet;
export declare type PluginServiceGlobalRegistrationAndOptions = chartJs.PluginServiceGlobalRegistration & chartJs.PluginServiceRegistrationOptions;
export declare type SingleLineLabel = string;
export declare type MultiLineLabel = string[];
export declare type Label = SingleLineLabel | MultiLineLabel;
export declare class BaseChartDirective implements OnDestroy, OnChanges, OnInit, OnDestroy, DoCheck {
    private element;
    private themeService;
    data: SingleOrMultiDataSet;
    datasets: chartJs.ChartDataSets[];
    labels: Label[];
    options: chartJs.ChartOptions;
    chartType: chartJs.ChartType;
    colors: Color[];
    legend: boolean;
    plugins: PluginServiceGlobalRegistrationAndOptions[];
    chartClick: EventEmitter<{
        event?: MouseEvent;
        active?: {}[];
    }>;
    chartHover: EventEmitter<{
        event: MouseEvent;
        active: {}[];
    }>;
    ctx: string;
    chart: Chart;
    private old;
    private subs;
    /**
     * Register a plugin.
     */
    static registerPlugin(plugin: PluginServiceGlobalRegistrationAndOptions): void;
    static unregisterPlugin(plugin: PluginServiceGlobalRegistrationAndOptions): void;
    constructor(element: ElementRef, themeService: ThemeService);
    ngOnInit(): void;
    private themeChanged;
    ngDoCheck(): void;
    copyLabel(a: Label): Label;
    labelsEqual(a: Label, b: Label): boolean;
    copyColor(a: Color): Color;
    colorsEqual(a: Color, b: Color): boolean;
    updateColors(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    update(duration?: any, lazy?: any): {};
    hideDataset(index: number, hidden: boolean): void;
    isDatasetHidden(index: number): boolean;
    toBase64Image(): string;
    getChartConfiguration(): chartJs.ChartConfiguration;
    getChartBuilder(ctx: string): Chart;
    smartMerge(options: any, overrides: any, level?: number): any;
    private isMultiLineLabel;
    private joinLabel;
    private propagateDatasetsToData;
    private propagateDataToDatasets;
    private isMultiDataSet;
    private getDatasets;
    private refresh;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseChartDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<BaseChartDirective, "canvas[baseChart]", ["base-chart"], {
    "options": "options";
    "data": "data";
    "datasets": "datasets";
    "labels": "labels";
    "chartType": "chartType";
    "colors": "colors";
    "legend": "legend";
    "plugins": "plugins";
}, {
    "chartClick": "chartClick";
    "chartHover": "chartHover";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jaGFydC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiYmFzZS1jaGFydC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0REEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgT25Jbml0LCBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIFNpbXBsZUNoYW5nZXMsIERvQ2hlY2sgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgY2hhcnRKcyBmcm9tICdjaGFydC5qcyc7XHJcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi9jb2xvcic7XHJcbmltcG9ydCB7IFRoZW1lU2VydmljZSB9IGZyb20gJy4vdGhlbWUuc2VydmljZSc7XHJcbmV4cG9ydCBkZWNsYXJlIHR5cGUgU2luZ2xlRGF0YVNldCA9IChudW1iZXJbXSB8IGNoYXJ0SnMuQ2hhcnRQb2ludFtdKTtcclxuZXhwb3J0IGRlY2xhcmUgdHlwZSBNdWx0aURhdGFTZXQgPSAobnVtYmVyW10gfCBjaGFydEpzLkNoYXJ0UG9pbnRbXSlbXTtcclxuZXhwb3J0IGRlY2xhcmUgdHlwZSBTaW5nbGVPck11bHRpRGF0YVNldCA9IFNpbmdsZURhdGFTZXQgfCBNdWx0aURhdGFTZXQ7XHJcbmV4cG9ydCBkZWNsYXJlIHR5cGUgUGx1Z2luU2VydmljZUdsb2JhbFJlZ2lzdHJhdGlvbkFuZE9wdGlvbnMgPSBjaGFydEpzLlBsdWdpblNlcnZpY2VHbG9iYWxSZWdpc3RyYXRpb24gJiBjaGFydEpzLlBsdWdpblNlcnZpY2VSZWdpc3RyYXRpb25PcHRpb25zO1xyXG5leHBvcnQgZGVjbGFyZSB0eXBlIFNpbmdsZUxpbmVMYWJlbCA9IHN0cmluZztcclxuZXhwb3J0IGRlY2xhcmUgdHlwZSBNdWx0aUxpbmVMYWJlbCA9IHN0cmluZ1tdO1xyXG5leHBvcnQgZGVjbGFyZSB0eXBlIExhYmVsID0gU2luZ2xlTGluZUxhYmVsIHwgTXVsdGlMaW5lTGFiZWw7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEJhc2VDaGFydERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBPbkluaXQsIE9uRGVzdHJveSwgRG9DaGVjayB7XHJcbiAgICBwcml2YXRlIGVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIHRoZW1lU2VydmljZTtcclxuICAgIGRhdGE6IFNpbmdsZU9yTXVsdGlEYXRhU2V0O1xyXG4gICAgZGF0YXNldHM6IGNoYXJ0SnMuQ2hhcnREYXRhU2V0c1tdO1xyXG4gICAgbGFiZWxzOiBMYWJlbFtdO1xyXG4gICAgb3B0aW9uczogY2hhcnRKcy5DaGFydE9wdGlvbnM7XHJcbiAgICBjaGFydFR5cGU6IGNoYXJ0SnMuQ2hhcnRUeXBlO1xyXG4gICAgY29sb3JzOiBDb2xvcltdO1xyXG4gICAgbGVnZW5kOiBib29sZWFuO1xyXG4gICAgcGx1Z2luczogUGx1Z2luU2VydmljZUdsb2JhbFJlZ2lzdHJhdGlvbkFuZE9wdGlvbnNbXTtcclxuICAgIGNoYXJ0Q2xpY2s6IEV2ZW50RW1pdHRlcjx7XHJcbiAgICAgICAgZXZlbnQ/OiBNb3VzZUV2ZW50O1xyXG4gICAgICAgIGFjdGl2ZT86IHt9W107XHJcbiAgICB9PjtcclxuICAgIGNoYXJ0SG92ZXI6IEV2ZW50RW1pdHRlcjx7XHJcbiAgICAgICAgZXZlbnQ6IE1vdXNlRXZlbnQ7XHJcbiAgICAgICAgYWN0aXZlOiB7fVtdO1xyXG4gICAgfT47XHJcbiAgICBjdHg6IHN0cmluZztcclxuICAgIGNoYXJ0OiBDaGFydDtcclxuICAgIHByaXZhdGUgb2xkO1xyXG4gICAgcHJpdmF0ZSBzdWJzO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlciBhIHBsdWdpbi5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIHJlZ2lzdGVyUGx1Z2luKHBsdWdpbjogUGx1Z2luU2VydmljZUdsb2JhbFJlZ2lzdHJhdGlvbkFuZE9wdGlvbnMpOiB2b2lkO1xyXG4gICAgc3RhdGljIHVucmVnaXN0ZXJQbHVnaW4ocGx1Z2luOiBQbHVnaW5TZXJ2aWNlR2xvYmFsUmVnaXN0cmF0aW9uQW5kT3B0aW9ucyk6IHZvaWQ7XHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmLCB0aGVtZVNlcnZpY2U6IFRoZW1lU2VydmljZSk7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSB0aGVtZUNoYW5nZWQ7XHJcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcclxuICAgIGNvcHlMYWJlbChhOiBMYWJlbCk6IExhYmVsO1xyXG4gICAgbGFiZWxzRXF1YWwoYTogTGFiZWwsIGI6IExhYmVsKTogYm9vbGVhbjtcclxuICAgIGNvcHlDb2xvcihhOiBDb2xvcik6IENvbG9yO1xyXG4gICAgY29sb3JzRXF1YWwoYTogQ29sb3IsIGI6IENvbG9yKTogYm9vbGVhbjtcclxuICAgIHVwZGF0ZUNvbG9ycygpOiB2b2lkO1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG4gICAgdXBkYXRlKGR1cmF0aW9uPzogYW55LCBsYXp5PzogYW55KToge307XHJcbiAgICBoaWRlRGF0YXNldChpbmRleDogbnVtYmVyLCBoaWRkZW46IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgaXNEYXRhc2V0SGlkZGVuKGluZGV4OiBudW1iZXIpOiBib29sZWFuO1xyXG4gICAgdG9CYXNlNjRJbWFnZSgpOiBzdHJpbmc7XHJcbiAgICBnZXRDaGFydENvbmZpZ3VyYXRpb24oKTogY2hhcnRKcy5DaGFydENvbmZpZ3VyYXRpb247XHJcbiAgICBnZXRDaGFydEJ1aWxkZXIoY3R4OiBzdHJpbmcpOiBDaGFydDtcclxuICAgIHNtYXJ0TWVyZ2Uob3B0aW9uczogYW55LCBvdmVycmlkZXM6IGFueSwgbGV2ZWw/OiBudW1iZXIpOiBhbnk7XHJcbiAgICBwcml2YXRlIGlzTXVsdGlMaW5lTGFiZWw7XHJcbiAgICBwcml2YXRlIGpvaW5MYWJlbDtcclxuICAgIHByaXZhdGUgcHJvcGFnYXRlRGF0YXNldHNUb0RhdGE7XHJcbiAgICBwcml2YXRlIHByb3BhZ2F0ZURhdGFUb0RhdGFzZXRzO1xyXG4gICAgcHJpdmF0ZSBpc011bHRpRGF0YVNldDtcclxuICAgIHByaXZhdGUgZ2V0RGF0YXNldHM7XHJcbiAgICBwcml2YXRlIHJlZnJlc2g7XHJcbn1cclxuIl19